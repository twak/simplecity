
/**
 * File:    facade_04.cga
 * Created: 3 Nov 2008 15:31:30 GMT
 * Author:  andi, twak
 */

version "2017.0"


/* Attributes *************************************/
@Group("Building",1) @Range(5,40)
attr height 			= rand(18, 40)

attr groundfloor_height = rand(3, 4.4)
attr floor_height 		= rand(2.4, 3.5)

attr wallColor          = "#ffffff"
attr window_width		= 1#rand(1,1.1)
attr tile_width 		= window_width + 0.9#rand(0.5, 2) 
attr door_width			= 1.7#rand(1.5,2.1)

attr sillHeight = 0.2#case p (0.2): 0 else: rand (0.2, 0.3)
attr lintelHeight = 0.3#case p (0.2): 0 else: rand (0.2, 0.3)
attr lintelDepth = 0.2#rand (0.2, 0.3)
attr ledgeHeight = 0.4#case p (0.4): 0 else: rand(0.2, 0.6)
attr ledge2Height = 0.25#case p (0.7): 0 else: rand(0.2, 0.3)
attr roofAngle = 30 #case p (0.2): 0 else: rand (20, 45) 

attr empty = false

attr shopGroundFloor = false #p(0.5)
/* Functions *************************************/

# this function will return the requested texture string 
# of the type facade/window.x.tif
randomWindowTex = fileRandom("*facades/textures/window.*.jpg")
randomDoorTex = fileRandom("*facades/textures/doortex.*.jpg")
		
const wall_inset = 0.4



Blue --> 
	color(0,0,1) X

Pink --> 
	case empty: Blue
	else : color(1,0.5,1) X


Pinky --> case empty: Blue
	else : color (1, 0.5, 0.5) X
	
Orange --> case empty: Blue
	else : color(1,0.5,0.0) X
	
Greeny --> case empty: Blue
	else : color(0,1,1) X
	
Green --> case empty: Blue
	else : color(0,1,0) X

Yellow --> case empty: Blue
	else : color(1,1,0) X
	
DarkYellow --> case empty: Blue
	else : color(0.5,0.5,0) X
	
Spot --> case empty: Blue
	else : color(1,0.5,0) X

Magenta --> case empty: Blue
	else : color (1, 0, 1) X

Cyan --> case empty: Blue
	else : color (0,1,1) X
	
DarkCyan --> case empty: Blue
	else : color (0,0.5,0.5) X



Red -->
	color (1,0,0)
	X
	
	
/* Initial Shape starting rule *************/

# extrude the lot to building height
@StartRule
Lot --> extrude(height) Building



# we only need the front face for this example
Building --> comp(f) { side : FrontfacadeTex|
top : Roof}

Roof -->
	case roofAngle == 0 || empty: Blue
	else: roofHip(roofAngle,0)
		DarkCyan 
		


FrontfacadeTex -->
	setupProjection(0, scope.xy, 2.25, 1.5, 1) 		// setup 2.25m x 1.5m texture tiles (and distortion in z)
	setupProjection(2, scope.xy, '1, '1) 	// setup texture channel 2 for dirt mapping over whole facade
	Frontfacade
	
# the front facade is subdivided into one front groundfloor 
# and upper floors
Frontfacade -->	
	split(y){ groundfloor_height    : Floor(split.index) 	
		| floor_height : Floor(split.index)   		 			
		| floor_height : Floor(split.index)		 		
		| {~floor_height : Floor(split.index) | ledge2Height : s('1,'1,0.3) LedgeAsset }*			
		| floor_height : Floor(999)						
		| ledgeHeight : s('1,'1,0.3) LedgeAsset}  



# depending on the floor index, floors are split into bottom ledge, tile (window) and top ledge area
Floor(floorindex) -->
	case floorindex == 0: #&& ! p(0.2): 
		// Groundfloor has tiles only, no ledges
		Subfloor(floorindex)
	case floorindex == 2: #&& p(0.8) || p (0.1) : 
		// because windows start at floor level, no bottom ledge for second floor
		// but balcony instead 
		split(y){~1 : Subfloor(floorindex) Balcony | 0.5 : TopLedge}
	else : 
		// all other floors have bottom ledge, tile and top ledge area
		split(y){1 : BottomLedge(floorindex) | ~1 : Subfloor(floorindex) | 0.5 : TopLedge}
	







# ----------------------------------------
# Tiles
# ----------------------------------------

# Tiles consist of small wall areas on left and right edges and repeating tiles in between
Subfloor(floorindex) -->
	split(x){ 0.5 : Wall(1) 
			| { ~tile_width : Tile(floorindex, split.index) }* 
			| 0.5 : Wall(1) }
	

# a tile consists of a centered window element and 
# wall elements left and right.		
Tile(floorindex, tileindex) -->
	case floorindex == 0 && shopGroundFloor:
		// the groundfloor has different dimensions and different shapes 
		split(x){ ~1 : SolidWall 
			|  door_width : DoorTile (tileindex)
			| ~1 : SolidWall }		 
	else : 	
		split(x){ ~1 : Wall(getWalltype(floorindex))
			|  window_width : WindowTile(floorindex, tileindex)
			| ~1 : Wall(getWalltype(floorindex)) }		 
	



# ----------------------------------------
# Windows
# ----------------------------------------

# different window ornaments for windowtiles on different floors
WindowTile(floorindex, tileIndex) -->
	case floorindex == 1 || floorindex == 999: Window
	#case floorindex == 2 : Window t(0,'1,0) WindowOrnamentRound
	case floorindex == 0 && tileIndex == 1: Orange
	else: WindowLintel Window WindowLedge
	


# set dimensions for the triangle window element and insert it
WindowOrnamentRound -->
		s('1.7, 1.2, 0.4) center(x) O Wall(0)
		split(x){~1 : WindowMod | window_width : NIL | ~1 : WindowMod }

	
WindowMod -->
// the modillion asset is scaled in negative y direction 
// which aligns its top at the window top edge
	s(0.2,'1.3,'0.6) t(0,'-1,0) center(x) extrude (0.2) Spot



WindowLedge -->
	case sillHeight == 0 || empty:
		NIL
		else: 
		s('1.5, sillHeight, 0.1) t(0,-sillHeight,0) center(x) primitiveCube() Yellow

WindowLintel -->
	case lintelHeight == 0 || empty:
		NIL
		else: 
		t(0,scope.sy,0) s('1.1, lintelHeight, lintelDepth) center(x) primitiveCube() Magenta
	
	
# firstly, the depth and the depth position of the future window is set
# secondly, one of nine window textures is randomly selected	  
# finally, the window geometry asset is inserted
Window -->
	
	extrude (-0.2)
	comp(f) {
		left: Wall |
		right: Wall |
		front: Wall |
		back: Wall |
		top: Red
	}
	
	
# --------------------------00--------------
# Door0
# ----------------------------------------

# The door tile is split vertically into door, arc and top area
DoorTile(i) --> X

Foo-->
	// to ensure non-elliptic arcs, the height of the arc area need to
	// be half the width of the door (the current x scope)
	split(y){~1 : Door | scope.sx/2 : Arcs | 0.2 : Arctop}

# Adds wall material and a centered modillion
Arctop -->
	split(x) {
		~0.2: Pinky |
		~0.2: Wall
	}*

# 
Arcs -->  
	s('1,'1,wall_inset) t(0,0,-wall_inset) Doortop
	primitiveCube() Pinky
	
# inserts the actual arc asset
ArcAsset --> A Wall(1)

Door -->
	Magenta
	



# ----------------------------------------
# Ledges
# ----------------------------------------


TopLedge --> WallStripe 

BottomLedge(floorindex) -->

	case floorindex == 1 : split(y){~1 : Wall(0) | ~1 : s('1,'1,0.2) LedgeAsset}
	case floorindex == 999 : split(y){~1 : WallStripe | ~1 : s('1,'1,0.2) LedgeAsset}
	else : WallStripe

WallStripe --> split(x){ 0.5 : Pink | ~1 : Wall(2) | 0.5 : Pink } 


LedgeAsset --> 
	case empty: Blue else: extrude (0.1) Cyan



# ----------------------------------------
# Balcony
# ----------------------------------------

Balcony --> 
	case empty: NIL
	else:
	s(scope.sx - 0.6,2,1) t(0.3,-0.3,0) primitiveCube() 
	split(y){0.2 : BalconyBeams 
			| 0.3 : BalconyFloor 
			| 1 : RailingBox }

# The beams supporting the balcony are created with a repeating split
BalconyBeams -->			
	split(x){ ~0.4 : s(0.2,'1,'0.9) center(x)  Greeny }*

# Get the front, left and right components (faces) of the RailingBox shape
RailingBox -->
	comp(f){front : Rail | left : Rail | right : Rail} // | left : Rail | right : Rail}}

# set rail dimensions and insert cube to create balconyony rails
Rail --> 
	 s('1.1,'1,0.1) t(0,0,-0.1) center(x) primitiveCube() Green

BalconyFloor --> color(0,1,0) X

  


# ----------------------------------------
# Wall
# ----------------------------------------

	
# for the wall asset, setting the texture scale params u and v 
# guarantees a texture mapping that nicely fits over the whole facade
getWalltype(floorindex) = 
	case floorindex == 0 : 1
	case floorindex == 1 : 1
	else : 2

Wall --> Wall(0)

Wall(walltype) -->
	Blue




SolidWall -->
		s('1,'1,wall_inset) t(0,0,-wall_inset)
		primitiveCube()	
		Wall(1)		  	